
<template>
  <view id="wrap">
    <view class="contorll">
      <button type="button" @tap="prevMonth">
        前
      </button>
      <view>
        <text id="year">{{year}}</text>
        <text>/</text>
        <text id="month">{{monthShow}}</text>
      </view>
      <button  type="button"  @tap="nextMonth">
        后
      </button>
    </view>
    <view class="calendar">
      <view class="thead">
        <repeat  for="{{week}}" key="weekIndex"  index="weekIndex"   item="item">
           <view class="th">
            {{item}}
          </view>
        </repeat>
      </view>
      <view class="tbody">
        <repeat for="{{dateList}}" key="index"  index="index"   item="item"> 
          <day :dayData.sync="item" :index="index" :propSelectDay="propSelectDay" ></day>
        </repeat>
      </view>
    </view>
  </view>
</template>
<style lang="scss" >
.contorll{
  display: flex;
    flex-wrap:nowrap;
    justify-content: space-between;
    margin-bottom: 10rpx;
    button,view {
       height: 80rpx;
       line-height: 80rpx;
    }
}
.calendar{
  .thead,.tbody{
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    .td,.th{
       position: relative;
       flex-basis: 14%;
       height: 80rpx;
       line-height: 80rpx;
       font-size: 30rpx;
       margin-top: 5rpx;
       text-align: center;
       background: #f7faff;
        &.weekend{
          background: #eff5ff;
        }
        &.selected{
          background: #ffedf6;
          font-weight: 700;
        }
        &.hasEvent::after,
        &.selected.hasEvent::after{
          content: ".";
          position:absolute;
          display: block;
          bottom: -4rpx;
          left: 50%;
          margin-left:-5rpx;
          font-size: 60rpx;
          flex-wrap: 700;
          color: #fe8080;
        }
        &.selected.hasEvent::after{
          color: #ccc;
        }
    }
    .th{
      background: #6984ab;
      color: #fff;
    }
  }
}
</style>

<script>
import WEPY from 'wepy';
import Day from './day'
export default class Calendar extends WEPY.component {
  data = {
    week:["日","一","二","三","四","五","六"],
    year:'',
    month:'',
    dateList:[]
  }
  onLoad () {
    this.year = new Date(this.$data.calendarData.today).getFullYear();
    this.month = new Date(this.$data.calendarData.today).getMonth()+1;
    this.methods.date(this.$data.calendarData.today);
  }
  computed = {
    monthShow:()=> this.month > 9 ? this.month : "0"+ this.month
  }
  methods = {
    date: (today)=>{
      // 月份计算，看是否在小月和2月中
      const monthDays = (m)=> {
        let  dayLen = 31;
        const thirtyDay = [4,6,9,11];
        if(thirtyDay.indexOf(m) != -1) {
          dayLen = 30;
        } else if(m == 2) { 
          if( this.year % 4 == 0 ) {
            dayLen = 29;
          } else {
            dayLen = 28;
          }
        }
        return dayLen;
      };
      // 判断月份日期数
      const cur = monthDays(this.month);
      const last = monthDays(this.month-1);
      // 工具方法 补0 和上下月计算
      const monthPrev = ()=> parseInt(this.month)-1;
      const monthNext = ()=> parseInt(this.month)-1;
      const dayCount = (d)=> d < 10 ?  "0" + d : d;
      // 月初月末 落在周几
      const monStar = new Date(today.substr(0,today.lastIndexOf("-")+1).concat("01")).getDay();
      const monEnd = new Date(today.substr(0,today.lastIndexOf("-")+1).concat(cur)).getDay();
      // 月份数组
      let lastMon = [];
      const curMon = [];
      const nextMon = [];
      // 最终月份
      let dateCell = [];
      // 当月
      for( let i = 1; i<=cur;i++){
        curMon.push({
            "id": this.year + "-" + dayCount(this.month) +"-" + dayCount(i),
            "day" : i,
            "selected": false
          });
      };
      // 上月
      for( let p = 1; p<=last;p++){
        lastMon.push({
          "id": this.year + "-" + dayCount(monthPrev()) +"-" + dayCount(p),
          "day" : p,
          "selected": false
        });
      };
      // 下月
      for( let n = 1; n<=6;n++){
        nextMon.push({
          "id": this.year + "-" + dayCount(monthNext()) +"-" + dayCount(n),
          "day" : n,
          "selected": false
        });
      };
      dateCell = lastMon.slice(last-monStar,last).concat(curMon).concat(nextMon.slice(0,6-monEnd));
      dateCell.forEach((e,i)=>{
        e["index"] = i;
        e["hasEvent"] = false;
        this.calendarData.dating.forEach((event)=>{
          if(e["id"] == event.day){
            e["hasEvent"] = true;
          }
        })
      });
      this.dateList = dateCell;
      return dateCell;
    },
    prevMonth:()=>{
      if(parseInt(this.month)-1 > 0) {
        this.month = parseInt(this.month)-1;
      } else {
        this.month = 12;
        this.year-=1;
      }
      this.methods.date(this.year+"-"+ this.month +"-"+"01");
    },
    nextMonth:()=>{
      if(parseInt(this.month)+1 <= 12) {
        this.month = parseInt(this.month)+1;
      } else {
        this.year+=1;
        this.month = 1;
      }
      this.methods.date(this.year+"-"+ this.month  +"-"+"01");
    }
  };
  components = {
    day:Day
  }
  props = { // 接收父组件传递下来的数据
    calendarData: Object
  };
  events = {
    propSelectDay: day => {
      this.dateList.forEach((e,i)=>{
        if(e.id == day) {
          this.dateList.splice(i,1,Object.assign(e,{"selected" : true}))
        } else {
          e.selected = false;
        }
      });
      this.$emit("propSelectedDay",day);
    }
  };
}

</script>




